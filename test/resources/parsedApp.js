exports.parseResult = function() {
  return [ { docsText: '',
    codeText: 'var express = require(\'express\');\nvar path = require(\'path\');\nvar favicon = require(\'serve-favicon\');\nvar logger = require(\'morgan\');\nvar cookieParser = require(\'cookie-parser\');\nvar bodyParser = require(\'body-parser\');\nvar routes = require(\'./routes/index\');\nvar users = require(\'./routes/users\');\nvar app = express();\n\n\n\n\n' },
  { docsText: '////////////////for docco\n',
    codeText: '\nvar fs = require(\'fs\');\nvar lineReader = require(\'line-reader\');\nvar _ = require(\'underscore\');\n\n\nvar filePath = \'./app.js\';\n\nvar getCodeTextHash = fs.readFile(filePath, function(error, buffer) {\n    var code, sections, parsedCode;\n    if (error) {\n        return callback(error);\n    }\n    code = buffer.toString();\n    parsedCode = parse(code.split(\'\\n\'), filePath);\n    console.log(parsedCode);\n    return parsedCode;\n});\n\nvar Docco, buildMatchers, commander, configure, defaults, document, format, fs, getLanguage, highlightjs, languages, marked, parse, path, run, version, write, _,\n    __slice = [].slice;\n\nvar parse = function(lines, filePath) {\n    var languages = JSON.parse(fs.readFileSync(\'node_modules/docco/resources/languages.json\'));\n\n    var buildMatchers = function(languages) {\n        var ext, l;\n        for (ext in languages) {\n            l = languages[ext];\n            l.commentMatcher = RegExp("^\\\\s*" + l.symbol + "\\\\s?");\n            l.commentFilter = /(^#![/]|^\\s*#\\{)/;\n        }\n        return languages;\n    };\n\n    var langs = buildMatchers(languages);\n\n    var getLanguage = function(config, filePath) {\n        var codeExt, codeLang, ext, lang, _ref;\n        console.log(path.basename(filePath));\n        var filename = path.basename(filePath);\n        var selectedLang = \'.js\';\n        ext = path.extname(\'test\') || selectedLang;\n        lang = ((_ref = config.languages) != null ? _ref[ext] : void 0) || languages[ext];\n        return lang;\n    };\n\n    var lang = getLanguage(langs, filePath);\n    var codeText, docsText, hasCode, i, isText, lang, line, lines, match, maybeCode, save, sections, _i, _j, _len, _len1;\n    sections = [];\n    hasCode = docsText = codeText = \'\';\n    save = function() {\n        sections.push({\n            docsText: docsText,\n            codeText: codeText\n        });\n        return hasCode = docsText = codeText = \'\';\n    };\n    for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {\n        line = lines[_j];\n        if (line.match(lang.commentMatcher) && !line.match(lang.commentFilter)) {\n            if (hasCode) {\n                save();\n            }\n            docsText += (line = line.replace(lang.commentMatcher, \'\')) + \'\\n\';\n            if (/^(---+|===+)$/.test(line)) {\n                save();\n            }\n        } else {\n            hasCode = true;\n            codeText += line + \'\\n\';\n        }\n    }\n    save();\n    return sections;\n};\n\n' },
  { docsText: '///////////////////////////\n', codeText: '\n\n' },
  { docsText: 'view engine setup\n',
    codeText: 'app.set(\'views\', path.join(__dirname, \'views\'));\napp.set(\'view engine\', \'ejs\');\n\n' },
  { docsText: 'uncomment after placing your favicon in /public\napp.use(favicon(__dirname + \'/public/favicon.ico\'));\n',
    codeText: 'app.use(logger(\'dev\'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, \'public\')));\n\napp.use(\'/\', routes);\napp.use(\'/users\', users);\n\n' },
  { docsText: 'catch 404 and forward to error handler\n',
    codeText: 'app.use(function(req, res, next) {\n    var err = new Error(\'Not Found\');\n    err.status = 404;\n    next(err);\n});\n\n' },
  { docsText: 'error handlers\n', codeText: '\n' },
  { docsText: 'development error handler\nwill print stacktrace\n',
    codeText: 'if (app.get(\'env\') === \'development\') {\n    app.use(function(err, req, res, next) {\n        res.status(err.status || 500);\n        res.render(\'error\', {\n            message: err.message,\n            error: err\n        });\n    });\n}\n\n' },
  { docsText: 'production error handler\nno stacktraces leaked to user\n',
    codeText: 'app.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.render(\'error\', {\n        message: err.message,\n        error: {}\n    });\n});\n\n\nmodule.exports = app;\n\n' } ];
};
